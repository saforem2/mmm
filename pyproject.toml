[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[project]
name = 'mmm'
description = ''
dynamic = ['version']
readme = 'README.md'
requires-python = '>=3.10'
# license = ''
keywords = []
authors = [{ name = 'Sam Foreman', email = 'saforem2@gmail.com' }]
# classifiers = [
#   'Development Status :: 4 - Beta',
#   'Programming Language :: Python',
#   'Programming Language :: Python :: 3.8',
#   'Programming Language :: Python :: 3.9',
#   'Programming Language :: Python :: 3.10',
#   'Programming Language :: Python :: 3.11',
#   'Programming Language :: Python :: 3.12',
#   'Programming Language :: Python :: Implementation :: CPython',
#   'Programming Language :: Python :: Implementation :: PyPy',
# ]
dependencies = [
  'mpi4py',
  'torch',
  'torchdata',
  'rich',
  'transformers',
  'datasets',
  # Tokenization
  'blobfile',
  'tiktoken',
  'timm',
  # Miscellaneous
  'torchinfo',
  'tomli',
  'wandb',
  'tqdm',
  'ezpz @ git+https://github.com/saforem2/ezpz',
  'ambivalent @ git+https://github.com/saforem2/ambivalent',
]


[project.optional-dependencies]
dev = [
  'pudb',
  'matplotx',
  'nodejs',
  'pynvim',
  'neovim',
  'pyright',
  'ruff',
  'ipython',
  'ptipython',
]

[project.urls]
Documentation = 'https://github.com/saforem2/mmm'
Issues = 'https://github.com/saforem2/mmm/issues'
Source = 'https://github.com/saforem2/mmm'

# [project.scripts] # Optional
# example-cli-command = 'template.module1:main' # executes `template.module1.main` when 'example-cli-command' is run from CLI

# Tools settings -------------------------------------------------------------------------------------------------------
#
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    '.bzr',
    '.direnv',
    '.eggs',
    '.git',
    '.git-rewrite',
    '.hg',
    '.ipynb_checkpoints',
    '.mypy_cache',
    '.nox',
    '.pants.d',
    '.pyenv',
    '.pytest_cache',
    '.pytype',
    '.ruff_cache',
    '.svn',
    '.tox',
    '.venv',
    '.vscode',
    '__pypackages__',
    '_build',
    'buck-out',
    'build',
    'dist',
    'node_modules',
    'site-packages',
    'venv',
]

# Same as Black.
line-length = 79
indent-width = 4

# Assume Python 3.9
target-version = 'py310'

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ['E4', 'E7', 'E9', 'F']
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ['ALL']
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = '^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$'

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = 'single'

# Like Black, indent with spaces, rather than tabs.
indent-style = 'space'

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = 'auto'

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = 'dynamic'
# [tool.ruff]
# line-length = 79


[tool.hatch.version]
path = 'src/mmm/__about__.py'

[tool.hatch.build]
exclude = ['src/mmm/outputs/', '**old**']

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]

[tool.hatch.build.targets.wheel]
packages = ['src/mmm']

[tool.pyright]
include = ['src']
exclude = [
  '**/node_modules',
  '**/__pycache__',
  'src/experimental',
  'src/typestubs'
]
ignore = ['src/old']
defineConstant = { DEBUG = true }
stubPath = 'src/stubs'

reportMissingImports = 'error'
reportMissingTypeStubs = false

pythonVersion = '3.10'
# pythonPlatform = 'Linux'

# executionEnvironments = [
#   { root = 'src/web', pythonVersion = '3.5', pythonPlatform = 'Windows', extraPaths = [ 'src/service_libs' ], reportMissingImports = 'warning' },
#   { root = 'src/sdk', pythonVersion = '3.0', extraPaths = [ 'src/backend' ] },
#   { root = 'src/tests', extraPaths = ['src/tests/e2e', 'src/sdk' ]},
#   { root = 'src' }
# ]

# [tool.hatch.envs.default]
# dependencies = [
#   'pytest',
#   'pytest-cov',
# ]
# [tool.hatch.envs.default.scripts]
# cov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/mmm --cov=tests'
# no-cov = 'cov --no-cov'
#
# [[tool.hatch.envs.test.matrix]]
# python = ['38', '39', '310', '311']

# [tool.coverage.run]
# branch = true
# parallel = true
# omit = [
#   'mmm/__about__.py',
# ]
#
# [tool.coverage.report]
# exclude_lines = [
#   'no cov',
#   'if __name__ == .__main__.:',
#   'if TYPE_CHECKING:',
# ]
# [tool.setuptools]  # configuration specific to the `setuptools` build backend.
# packages = { find = { where = ['.'], include = ['template', 'template.*'] } }
# package-data = { 'sample' = ['*.yaml'] }
#
# [tool.setuptools.dynamic]
# version = { attr = 'template.__version__' }
#
# [tool.docformatter]
# wrap-summaries = 120
# wrap-descriptions = 120
# in-place = true
# pre-summary-newline = true
# close-quotes-on-newline = true
#
# [tool.codespell]
# ignore-words-list = 'crate,nd,strack,dota,ane,segway,fo,gool,winn,commend'
# skip = '*.csv,*venv*,docs/??/,docs/mkdocs_??.yml'
